---
import Badge from "../UI/Badge.astro";
import { HowItWorks } from "../../../data/HowItWorks.js";
import TitlePrimary from "../UI/TitlePrimary.astro";
---

<!-- ¿Cómo funciona? - Estilo moderno inspirado en HeroVersion2 -->
<section class="overflow-hidden relative py-20 bg-gradient-to-b from-gray-50 to-white sm:py-24 md:py-32" id="como-funciona">
    <!-- Elementos decorativos flotantes - Responsive -->
    <div class="overflow-hidden absolute inset-0 pointer-events-none">
        <div class="absolute left-6 top-24 w-20 h-20 bg-gradient-to-br rounded-full opacity-30 blur-xl sm:top-28 md:top-32 sm:left-12 md:left-16 sm:w-24 sm:h-24 md:w-28 md:h-28 from-primary/20 to-accent/10 sm:blur-2xl sm:opacity-40"></div>
        <div class="absolute right-4 top-48 w-24 h-24 bg-gradient-to-br rounded-full opacity-40 blur-2xl sm:top-56 md:top-60 sm:right-8 md:right-12 sm:w-30 sm:h-30 md:w-36 md:h-36 from-secondary/25 to-primary/15 sm:blur-3xl sm:opacity-50"></div>
        <div class="absolute bottom-32 left-1/3 w-20 h-20 bg-gradient-to-br rounded-full opacity-25 blur-xl sm:bottom-36 md:bottom-40 sm:w-28 sm:h-28 md:w-32 md:h-32 from-accent/20 to-secondary/10 sm:blur-2xl sm:opacity-35"></div>
        <div class="absolute bottom-16 right-1/4 w-16 h-16 bg-gradient-to-br rounded-full opacity-30 blur-lg sm:bottom-18 md:bottom-20 sm:w-20 sm:h-20 md:w-24 md:h-24 from-primary/30 to-accent/20 sm:blur-xl sm:opacity-40"></div>
    </div>
    
    <div class="container relative z-10 px-4 mx-auto sm:px-6">
        <div class="mx-auto max-w-6xl text-center">
            
            <!-- Badge superior -->
            <div class="gsap-badge">
                <Badge text={HowItWorks.badge} />
            </div>

            <!-- Título principal con gradiente - Responsive -->
            <TitlePrimary text={HowItWorks.title} boldText={HowItWorks.title2} />
            
            <!-- Subtítulo - Responsive -->
            <p class="px-4 mx-auto mb-12 max-w-4xl text-lg leading-relaxed text-gray-600 gsap-subtitle sm:text-xl md:text-2xl sm:mb-6 sm:px-0">
                {HowItWorks.description} <span class="font-semibold text-secondary">{HowItWorks.tab1}</span> 
                e <span class="font-semibold text-primary">{HowItWorks.inverseTab1}</span>
            </p>

            <!-- Tabs modernos - Responsive -->
            <div class="flex justify-center mb-12 gsap-tabs sm:mb-6">
                <div class="p-1 w-full max-w-lg bg-white rounded-xl border border-gray-200 shadow-xl sm:rounded-2xl sm:p-0 sm:max-w-none sm:w-auto">
                    <button id="tab-facturador-btn" class="px-4 py-3 w-full text-base font-bold rounded-lg transition-all duration-300 sm:w-auto sm:px-8 sm:py-4 sm:rounded-xl sm:text-lg tab-btn active-tab">
                        <span class="sm:hidden">{HowItWorks.tab1}</span>
                        <span class="hidden sm:inline">{HowItWorks.tab1}</span>
                    </button>
                    <button id="tab-inversor-btn" class="px-4 py-3 mt-1 w-full text-base font-bold rounded-lg transition-all duration-300 sm:w-auto sm:px-8 sm:py-4 sm:rounded-xl sm:text-lg tab-btn inactive-tab sm:mt-0">
                        <span class="sm:hidden">{HowItWorks.tab2}</span>
                        <span class="hidden sm:inline">{HowItWorks.tab2}</span>
                    </button>
                </div>
            </div>

            <!-- Contenido Facturador -->
            <div id="content-facturador" class="tab-content-modern">
                <div class="grid gap-6 mx-auto max-w-5xl h-full sm:grid-cols-2 lg:grid-cols-3 sm:gap-8">
                    {HowItWorks.tab1Body.map((item, index) => (
                        <div class="h-full group gsap-card" data-index={index}>
                            <div class="card-wrapper">
                                <div class="card-hover-bg"></div>
                                <div class="card-content">
                                    <!-- Número con gradiente -->
                                    <div class="icon-container group-hover:scale-110">
                                        <span class="text-2xl font-bold text-white sm:text-3xl very-short:text-xl">{index + 1}</span>
                                    </div>
                                    
                                    <h3 class="mb-4 text-xl font-bold text-gray-900 sm:text-2xl sm:mb-6">{item.title}</h3>
                                    <p class="text-base leading-relaxed text-gray-600 sm:text-lg">{item.description}</p>
                                    
                                    <!-- Badge + icono -->
                                    <div class="inline-flex items-center px-3 py-1.5 mt-4 text-xs font-semibold text-green-700 bg-green-100 rounded-full sm:mt-6 sm:px-4 sm:py-2 sm:text-sm badge-morphing">
                                        <div class="mr-2 w-4 h-4 badge-icon-container">
                                            <Fragment set:html={item.icon} />
                                        </div>
                                        {item.badge}
                                    </div>
                                </div>
                            </div>
                        </div>
                    ))}
                </div>
            </div>

            <!-- Contenido Inversor -->
            <div id="content-inversor" class="hidden tab-content-modern">
                <div class="grid gap-6 mx-auto max-w-5xl sm:grid-cols-2 lg:grid-cols-3 sm:gap-8">
                    {HowItWorks.tab2Body.map((item, index) => (
                        <div class="h-full group gsap-card" data-index={index}>
                            <div class="card-wrapper">
                                <div class="card-hover-bg"></div>
                                <div class="card-content">
                                    <!-- Número con gradiente -->
                                    <div class="icon-container group-hover:scale-110">
                                        <span class="text-2xl font-bold text-white sm:text-3xl very-short:text-xl">{index + 1}</span>
                                    </div>
                                    
                                    <h3 class="mb-4 text-xl font-bold text-gray-900 sm:text-2xl sm:mb-6">{item.title}</h3>
                                    <p class="text-base leading-relaxed text-gray-600 sm:text-lg">{item.description}</p>
                                    
                                    <!-- Badge + icono -->
                                    <div class="inline-flex items-center px-3 py-1.5 mt-4 text-xs font-semibold text-green-700 bg-green-100 rounded-full sm:mt-6 sm:px-4 sm:py-2 sm:text-sm badge-morphing">
                                        <div class="mr-2 w-4 h-4 badge-icon-container">
                                            <Fragment set:html={item.icon} />
                                        </div>
                                        {item.badge}
                                    </div>
                                </div>
                            </div>
                        </div>
                    ))}
                </div>
            </div>
        </div>
    </div>
</section>

<style>
    /* Elementos decorativos flotantes */
    .floating-decorations {
        @apply overflow-hidden absolute inset-0 pointer-events-none;
    }

    .floating-element {
        @apply absolute rounded-full blur-lg;
        will-change: transform;
    }

    .floating-element--1 {
        @apply left-4 top-10 w-20 h-20 opacity-30 bg-gradient-to-br from-primary/20 to-accent/10 sm:top-16 sm:left-6 sm:w-28 sm:h-28 sm:blur-xl sm:opacity-40 md:top-20 md:left-10 md:w-32 md:h-32;
    }

    .floating-element--2 {
        @apply right-8 top-32 w-16 h-16 opacity-40 blur-xl bg-gradient-to-br from-secondary/30 to-primary/20 sm:top-36 sm:right-12 sm:w-20 sm:h-20 sm:blur-2xl sm:opacity-50 md:top-40 md:right-20 md:w-24 md:h-24;
    }

    .floating-element--3 {
        @apply bottom-24 left-1/4 w-24 h-24 opacity-20 blur-2xl bg-gradient-to-br from-accent/15 to-secondary/10 sm:bottom-28 sm:w-32 sm:h-32 sm:blur-3xl sm:opacity-30 md:bottom-32 md:w-40 md:h-40;
    }

    .floating-element--4 {
        @apply bottom-16 right-1/3 w-20 h-20 opacity-25 blur-xl bg-gradient-to-br from-primary/25 to-accent/15 sm:bottom-20 sm:w-24 sm:h-24 sm:blur-2xl sm:opacity-35 md:bottom-24 md:w-28 md:h-28;
    }

    /* Cards optimizadas con GPU acceleration */
    .card-wrapper {
        @apply overflow-hidden relative p-6 h-full bg-gradient-to-br from-white to-gray-50 rounded-2xl border border-gray-200 transition-all duration-300 sm:rounded-3xl sm:p-8;
        transform: translate3d(0, 0, 0); /* GPU acceleration */
        will-change: transform; /* Optimización para animaciones */
    }

    .card-wrapper:hover {
        @apply shadow-2xl;
        transform: translate3d(0, -4px, 0) scale(1.02); /* GPU acceleration */
    }

    .card-hover-bg {
        @apply absolute inset-0 bg-gradient-to-br opacity-0 transition-opacity duration-500 from-primary/5 to-accent/5;
        will-change: opacity; /* Optimización para transiciones */
    }

    .group:hover .card-hover-bg {
        @apply opacity-100;
    }

    .card-content {
        @apply relative z-10;
        transform: translate3d(0, 0, 0); /* GPU acceleration */
    }

    .icon-container {
        @apply flex justify-center items-center mb-4 w-16 h-16 very-short:w-12 very-short:h-12 very-short:mb-2 bg-gradient-to-br rounded-xl transition-transform duration-300 from-primary to-secondary sm:w-20 sm:h-20 sm:rounded-2xl sm:mb-6;
        transform: translate3d(0, 0, 0); /* GPU acceleration */
        will-change: transform; /* Optimización para hover */
    }

    /* Tabs */
    .active-tab {
        @apply bg-gradient-to-r from-primary to-secondary text-white shadow-lg scale-105;
    }
    
    .inactive-tab {
        @apply text-gray-600 hover:text-gray-900 hover:bg-gray-50;
    }
    
    .tab-content-modern {
        @apply transition-all duration-500 ease-in-out;
    }
    
    /* Estilos para morphing en badges */
    .badge-morphing {
        transition: all 0.3s ease;
    }
    
    .badge-morphing:hover {
        transform: scale(1.05);
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    }
    
    .badge-icon-container {
        transition: all 0.2s ease;
    }
    
    .badge-icon {
        transition: all 0.4s ease;
    }
    
    .morph-path-clock-normal,
    .morph-path-clock-active,
    .morph-path-computer,
    .morph-path-cloud,
    .morph-path-calendar,
    .morph-path-money,
    .morph-path-check,
    .morph-path-arrow,
    .morph-path-shield,
    .morph-path-shield-check,
    .morph-path-chart,
    .morph-path-roi-money {
        transition: all 0.6s cubic-bezier(0.4, 0, 0.2, 1);
        transform-origin: center;
    }
    
    /* Efectos de hover en badges */
    .badge-morphing:hover .badge-icon-container {
        transform: scale(1.2);
    }
    
    .badge-morphing:hover .badge-icon {
        filter: drop-shadow(0 0 4px currentColor);
    }
    
    /* Animación de entrada */
    .badge-morphing {
        animation: badgeEntrance 0.6s ease-out;
    }
    
    @keyframes badgeEntrance {
        from {
            opacity: 0;
            transform: scale(0.8) translateY(10px);
        }
        to {
            opacity: 1;
            transform: scale(1) translateY(0);
        }
    }

    /* Reducir motion para accesibilidad */
    @media (prefers-reduced-motion: reduce) {
        * {
            animation-duration: 0.01ms !important;
            animation-iteration-count: 1 !important;
            transition-duration: 0.01ms !important;
        }
    }
</style>

<script>
    // ✅ SOLUCIÓN SIN TYPESCRIPT - JavaScript puro que SÍ funciona
    
    // Declaraciones de tipos para GSAP
    declare global {
        interface Window {
            gsap: any;
            ScrollTrigger: any;
        }
    }
    
    // Variables globales simples
    let animationsReady = false;
    let animationsInitialized = false;
    
    // ✅ OPTIMIZACIÓN: Lazy loading de GSAP con prefetch
    function loadGSAP(): Promise<void> {
        return new Promise<void>((resolve, reject) => {
            // Cache check
            if (window.gsap && window.ScrollTrigger) {
                resolve();
                return;
            }
            
            // Preload con prefetch
            const link = document.createElement('link');
            link.rel = 'prefetch';
            link.href = 'https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/gsap.min.js';
            document.head.appendChild(link);
            
            // Carga dinámica optimizada
            const gsapScript = document.createElement('script');
            gsapScript.src = 'https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/gsap.min.js';
            gsapScript.async = true; // Carga asíncrona
            gsapScript.onload = () => {
                const scrollTriggerScript = document.createElement('script');
                scrollTriggerScript.src = 'https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/ScrollTrigger.min.js';
                scrollTriggerScript.async = true;
                scrollTriggerScript.onload = () => resolve();
                document.head.appendChild(scrollTriggerScript);
            };
            document.head.appendChild(gsapScript);
        });
    }

    // Función principal - SIN TypeScript
    async function initGSAPAnimations() {
        try {
            // ✅ Cargar GSAP si no está disponible
            if (typeof window.gsap === 'undefined' || typeof window.ScrollTrigger === 'undefined') {
                console.log('⏳ Cargando GSAP...');
                await loadGSAP();
            }

            // ✅ Evitar inicialización duplicada
            if (animationsInitialized) {
                console.log('⚠️ Animaciones ya inicializadas');
                return;
            }

            // ✅ Registrar ScrollTrigger
            window.gsap.registerPlugin(window.ScrollTrigger);
            
            console.log('🚀 Iniciando animaciones GSAP...');
            
            // Debug: Verificar elementos
            console.log('🔍 Elementos encontrados:');
            console.log('- Badge:', document.querySelector('.gsap-badge'));
            console.log('- Título:', document.querySelector('.gsap-title'));
            console.log('- Subtítulo:', document.querySelector('.gsap-subtitle'));
            console.log('- Tabs:', document.querySelector('.gsap-tabs'));
            console.log('- Cards:', document.querySelectorAll('.gsap-card').length);
            
            // Limpiar animaciones previas
            window.ScrollTrigger.getAll().forEach(function(trigger: any) {
                trigger.kill();
            });

            // ===== ANIMACIONES BÁSICAS QUE SÍ FUNCIONAN =====
            
            // 1. ✅ Badge entrada
            window.gsap.fromTo('.gsap-badge', 
                { opacity: 0, y: -30, scale: 0.8 },
                { 
                    opacity: 1, 
                    y: 0, 
                    scale: 1, 
                    duration: 0.8,
                    ease: 'power2.out',
                    scrollTrigger: {
                        trigger: '#como-funciona',
                        start: 'top 80%',
                        toggleActions: 'play none none reverse'
                    }
                }
            );

            // 2. ✅ Título con efecto
            window.gsap.fromTo('.gsap-title', 
                { opacity: 0, y: 50 },
                { 
                    opacity: 1, 
                    y: 0, 
                    duration: 1,
                    ease: 'power2.out',
                    scrollTrigger: {
                        trigger: '#como-funciona',
                        start: 'top 80%',
                        toggleActions: 'play none none reverse'
                    }
                }
            );

            // 3. ✅ Subtítulo
            window.gsap.fromTo('.gsap-subtitle', 
                { opacity: 0, y: 30 },
                { 
                    opacity: 1, 
                    y: 0, 
                    duration: 0.8,
                    ease: 'power2.out',
                    delay: 0.2,
                    scrollTrigger: {
                        trigger: '#como-funciona',
                        start: 'top 80%',
                        toggleActions: 'play none none reverse'
                    }
                }
            );

            // 4. ✅ Tabs
            window.gsap.fromTo('.gsap-tabs', 
                { opacity: 0, y: 40 },
                { 
                    opacity: 1, 
                    y: 0, 
                    duration: 0.8,
                    ease: 'power2.out',
                    scrollTrigger: {
                        trigger: '#como-funciona',
                        start: 'top 80%',
                        toggleActions: 'play none none reverse'
                    }
                }
            );

            // 5. ✅ Cards con stagger - ANIMACIÓN COMPLETA DE ENTRADA
            window.gsap.fromTo('.gsap-card', 
                { opacity: 0, y: 60, scale: 0.95 },
                { 
                    opacity: 1, 
                    y: 0, 
                    scale: 1,
                    duration: 0.8,
                    ease: 'power2.out',
                    stagger: 0.15,
                    scrollTrigger: {
                        trigger: '#content-facturador',
                        start: 'top 85%',
                        toggleActions: 'play none none reverse'
                    }
                }
            );

            // 6. ✅ Iconos de las cards (separados)
            window.gsap.fromTo('.gsap-card .icon-container', 
                { opacity: 0, scale: 0.5 },
                { 
                    opacity: 1, 
                    scale: 1, 
                    rotation: 0,
                    duration: 0.8,
                    ease: 'back.out(1.7)',
                    stagger: 0.1,
                    scrollTrigger: {
                        trigger: '#content-facturador',
                        start: 'top 85%',
                        toggleActions: 'play none none reverse'
                    }
                }
            );

            // 7. ✅ Hover effects para cards con throttling
            document.querySelectorAll('.gsap-card').forEach(function(card) {
                let hoverTimeout: any;
                
                card.addEventListener('mouseenter', function() {
                    clearTimeout(hoverTimeout);
                    hoverTimeout = setTimeout(() => {
                        window.gsap.to(card, {
                            y: -8, scale: 1.02, duration: 0.3, ease: 'power2.out'
                        });
                    }, 50); // Throttle de 50ms
                });

                card.addEventListener('mouseleave', function() {
                    clearTimeout(hoverTimeout);
                    window.gsap.to(card, {
                        y: 0, scale: 1, duration: 0.3, ease: 'power2.out'
                    });
                });
            });

            // 8. ✅ Elementos flotantes - Movimiento suave
            document.querySelectorAll('.floating-element').forEach(function(element, index) {
                // Movimiento flotante infinito
                window.gsap.to(element, {
                    y: 15 + index * 5,
                    rotation: 5 + index * 2,
                    duration: 3 + index * 0.5,
                    ease: 'power1.inOut',
                    yoyo: true,
                    repeat: -1
                });

                // Parallax ligero
                window.gsap.to(element, {
                    y: -30 - index * 10,
                    scrollTrigger: {
                        trigger: '#como-funciona',
                        start: 'top bottom',
                        end: 'bottom top',
                        scrub: true
                    }
                });
            });

            animationsInitialized = true;
            animationsReady = true;
            
            console.log('✅ Todas las animaciones GSAP inicializadas correctamente!');
            
            // Inicializar morphing de badges
            initBadgeMorphing();

        } catch (error) {
            console.error('❌ Error en GSAP:', error);
        }
    }

    // ===== SISTEMA DE INICIALIZACIÓN ROBUSTO =====
    
    function tryInitAnimations() {
        if (!animationsReady) {
            initGSAPAnimations();
        }
    }

    // Múltiples puntos de entrada
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', tryInitAnimations);
    } else {
        tryInitAnimations();
    }

    // Backup tras cargar completamente
    window.addEventListener('load', function() {
        setTimeout(tryInitAnimations, 100);
    });

    // Para navegación SPA de Astro
    document.addEventListener('astro:page-load', function() {
        animationsInitialized = false;
        animationsReady = false;
        setTimeout(tryInitAnimations, 200);
    });

    // Cleanup para navegación SPA
    document.addEventListener('astro:before-preparation', function() {
        if (typeof window.ScrollTrigger !== 'undefined') {
            window.ScrollTrigger.getAll().forEach(function(trigger: any) {
                trigger.kill();
            });
        }
        animationsInitialized = false;
        animationsReady = false;
    });

    // ===== FUNCIONALIDAD DE TABS =====
    
    document.addEventListener('DOMContentLoaded', function() {
        const facturadorBtn = document.getElementById('tab-facturador-btn');
        const inversorBtn = document.getElementById('tab-inversor-btn');
        const facturadorContent = document.getElementById('content-facturador');
        const inversorContent = document.getElementById('content-inversor');

        function switchToFacturador() {
            // Botones
            facturadorBtn?.classList.remove('inactive-tab');
            facturadorBtn?.classList.add('active-tab');
            inversorBtn?.classList.remove('active-tab');
            inversorBtn?.classList.add('inactive-tab');
            
            // Contenido
            facturadorContent?.classList.remove('hidden');
            inversorContent?.classList.add('hidden');
            
            // Reiniciar animaciones de badges
            initBadgeMorphing();
            
            // Reinicializar animaciones de cards para el tab facturador
            setTimeout(() => {
                window.gsap.fromTo('#content-facturador .gsap-card', 
                    { opacity: 0, y: 60, scale: 0.95 },
                    { 
                        opacity: 1, 
                        y: 0, 
                        scale: 1,
                        duration: 0.8,
                        ease: 'power2.out',
                        stagger: 0.15
                    }
                );
            }, 100);
        }

        function switchToInversor() {
            // Botones
            inversorBtn?.classList.remove('inactive-tab');
            inversorBtn?.classList.add('active-tab');
            facturadorBtn?.classList.remove('active-tab');
            facturadorBtn?.classList.add('inactive-tab');
            
            // Contenido
            inversorContent?.classList.remove('hidden');
            facturadorContent?.classList.add('hidden');
            
            // Reiniciar animaciones de badges
            initBadgeMorphing();
            
            // Reinicializar animaciones de cards para el tab inversor
            setTimeout(() => {
                window.gsap.fromTo('#content-inversor .gsap-card', 
                    { opacity: 0, y: 60, scale: 0.95 },
                    { 
                        opacity: 1, 
                        y: 0, 
                        scale: 1,
                        duration: 0.8,
                        ease: 'power2.out',
                        stagger: 0.15
                    }
                );
            }, 100);
        }

        facturadorBtn?.addEventListener('click', switchToFacturador);
        inversorBtn?.addEventListener('click', switchToInversor);
        
        // Inicializar morphing de badges
        initBadgeMorphing();
    });

    function initBadgeMorphing() {
        const badges = document.querySelectorAll('.badge-morphing');
        console.log(`Encontrados ${badges.length} badges con morphing`);
        
        badges.forEach((badge, index) => {
            const badgeElement = badge as HTMLElement;
            console.log(`Badge ${index}:`, badgeElement.textContent?.trim());
            
            // Animación escalonada de entrada
            setTimeout(() => {
                badgeElement.style.animation = 'badgeEntrance 0.6s ease-out';
            }, index * 200);
            
            // Configurar morphing específico para cada badge
            setupBadgeMorphing(badgeElement, index);
        });
    }

    function setupBadgeMorphing(badge: HTMLElement, index: number) {
        console.log(`Configurando badge ${index}:`, badge.textContent?.trim());
        
        // Detectar el tipo de badge basado en el contenido
        const badgeText = badge.textContent?.trim() || '';
        let morphFunction: (currentState: number) => void;
        let morphInterval: number;
        
        if (badgeText.includes('2 minutos')) {
            // Badge 1: "2 minutos" - Reloj normal → Reloj activo
            morphInterval = 4000;
            morphFunction = (currentState: number) => {
                const clockNormal = badge.querySelector('.morph-path-clock-normal') as HTMLElement;
                const clockActive = badge.querySelector('.morph-path-clock-active') as HTMLElement;
                
                if (clockNormal && clockActive) {
                    if (currentState === 0) {
                        clockNormal.style.opacity = '1';
                        clockActive.style.opacity = '0';
                    } else {
                        clockNormal.style.opacity = '0';
                        clockActive.style.opacity = '1';
                    }
                }
            };
        } else if (badgeText.includes('100% digital')) {
            // Badge 2: "100% digital" - Computadora → Nube
            morphInterval = 3500;
            morphFunction = (currentState: number) => {
                const computerPath = badge.querySelector('.morph-path-computer') as HTMLElement;
                const cloudPath = badge.querySelector('.morph-path-cloud') as HTMLElement;
                
                if (computerPath && cloudPath) {
                    if (currentState === 0) {
                        computerPath.style.opacity = '1';
                        cloudPath.style.opacity = '0';
                    } else {
                        computerPath.style.opacity = '0';
                        cloudPath.style.opacity = '1';
                    }
                }
            };
        } else if (badgeText.includes('24 horas')) {
            // Badge 3: "< 24 horas" - Calendario → Dinero
            morphInterval = 3000;
            morphFunction = (currentState: number) => {
                const calendarPath = badge.querySelector('.morph-path-calendar') as HTMLElement;
                const moneyPath = badge.querySelector('.morph-path-money') as HTMLElement;
                
                if (calendarPath && moneyPath) {
                    if (currentState === 0) {
                        calendarPath.style.opacity = '1';
                        moneyPath.style.opacity = '0';
                    } else {
                        calendarPath.style.opacity = '0';
                        moneyPath.style.opacity = '1';
                    }
                }
            };
        } else if (badgeText.includes('Rápido y fácil')) {
            // Badge 4: "Rápido y fácil" - Check → Flecha
            morphInterval = 3500;
            morphFunction = (currentState: number) => {
                const checkPath = badge.querySelector('.morph-path-check') as HTMLElement;
                const arrowPath = badge.querySelector('.morph-path-arrow') as HTMLElement;
                
                if (checkPath && arrowPath) {
                    if (currentState === 0) {
                        checkPath.style.opacity = '1';
                        arrowPath.style.opacity = '0';
                    } else {
                        checkPath.style.opacity = '0';
                        arrowPath.style.opacity = '1';
                    }
                }
            };
        } else if (badgeText.includes('Verificadas')) {
            // Badge 5: "Verificadas" - Escudo → Escudo con check
            morphInterval = 4000;
            morphFunction = (currentState: number) => {
                const shieldPath = badge.querySelector('.morph-path-shield') as HTMLElement;
                const shieldCheckPath = badge.querySelector('.morph-path-shield-check') as HTMLElement;
                
                if (shieldPath && shieldCheckPath) {
                    if (currentState === 0) {
                        shieldPath.style.opacity = '1';
                        shieldCheckPath.style.opacity = '0';
                    } else {
                        shieldPath.style.opacity = '0';
                        shieldCheckPath.style.opacity = '1';
                    }
                }
            };
        } else if (badgeText.includes('12%+ ROI')) {
            // Badge 6: "12%+ ROI" - Gráfico → Dinero
            morphInterval = 3000;
            morphFunction = (currentState: number) => {
                const chartPath = badge.querySelector('.morph-path-chart') as HTMLElement;
                const roiMoneyPath = badge.querySelector('.morph-path-roi-money') as HTMLElement;
                
                if (chartPath && roiMoneyPath) {
                    if (currentState === 0) {
                        chartPath.style.opacity = '1';
                        roiMoneyPath.style.opacity = '0';
                    } else {
                        chartPath.style.opacity = '0';
                        roiMoneyPath.style.opacity = '1';
                    }
                }
            };
        } else {
            console.log('Badge no reconocido:', badgeText);
            return;
        }
        
        let currentState = 0;
        
        function morphBadge() {
            console.log(`Morphing badge ${index} (${badgeText}) - Estado: ${currentState}`);
            morphFunction(currentState);
            currentState = (currentState + 1) % 2;
        }
        
        // Iniciar morphing después de un delay
        setTimeout(() => {
            morphBadge();
            setInterval(morphBadge, morphInterval);
        }, 1000 + (index * 500));
        
        // Efecto de hover que acelera la transición
        badge.addEventListener('mouseenter', function() {
            morphBadge();
        });
    }

    console.log('📋 Script de animaciones cargado, esperando inicialización...');
</script> 