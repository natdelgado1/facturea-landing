---
import { about } from "../../../data/about";
import Badge from "../UI/Badge.astro";
import TitlePrimary from "../UI/TitlePrimary.astro";
---

<!-- ¿Por qué elegir Facturea? -->
<section class="overflow-hidden relative pt-20 bg-gradient-to-b from-gray-50 to-white sm:py-24 md:py-32" id="por-que-facturea">
    <!-- Elementos decorativos flotantes -->
    <div class="floating-decorations">
        <div class="floating-element floating-element--1"></div>
        <div class="floating-element floating-element--2"></div>
        <div class="floating-element floating-element--3"></div>
        <div class="floating-element floating-element--4"></div>
    </div>
    
    <div class="container relative z-10 px-4 mx-auto sm:px-6">
        <div class="mx-auto max-w-6xl text-center">
            
            <!-- Badge superior -->
            <div class="gsap-badge">
            <Badge text={about.badgeText} />
            </div>
            
            <!-- Título principal con gradiente -->
            <TitlePrimary text={about.title} boldText={about.titleBold} />

            <!-- Subtítulo -->
            <p class="px-4 mx-auto mb-12 max-w-4xl text-lg leading-relaxed text-gray-600 gsap-subtitle sm:text-xl md:text-2xl sm:mb-16 sm:px-0">
                {about.description} <span class="font-semibold text-primary">{about.descriptionBold}</span> 
                {about.description2} <span class="font-semibold text-secondary">{about.descriptionBold2}</span>
            </p>

            <!-- Grid de propuestas de valor -->
            <div class="grid gap-6 mb-16 sm:grid-cols-2 lg:grid-cols-3 sm:gap-8 sm:mb-20">
                {about.items.map((item, index) => (
                    <div class="h-full cursor-pointer gsap-card group" data-index={index}>
                        <div class="card-wrapper">
                            <div class="card-hover-bg"></div>
                            <div class="card-content">
                                <div class="icon-container group-hover:scale-110">
                                    <svg class="w-8 h-8 text-white sm:w-10 sm:h-10 very-short:w-6 very-short:h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" aria-hidden="true">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"/>
                                    </svg>
                                </div>
                                <div class="counter-display gsap-counter" data-target={item.counterValue} data-suffix={item.counterSuffix}>
                                    <span class="counter-value">0</span><span class="counter-suffix">{item.counterSuffix}</span>
                                </div>
                                <h3 class="mb-3 text-xl font-bold text-gray-900 sm:text-2xl sm:mb-4">{item.title}</h3>
                                <p class="text-sm leading-relaxed text-gray-600 sm:text-base">{item.description}</p>
                            </div>
                        </div>
                    </div>
                ))}
            </div>

            <!-- CTA buttons -->
            <div class="mt-12 gsap-cta sm:mt-16">
                <div class="flex flex-col gap-4 justify-center items-center sm:flex-row">
                    <a class="btn btn--primary gsap-btn-primary" href={about.linkPrimaryButton} target="_blank" rel="noopener noreferrer">
                        {about.textPrimaryButton}
                    </a>
                    <button class="btn btn--secondary gsap-btn-secondary" id="demo-btn">
                        {about.textSecondaryButton}
                    </button>
                </div>
            </div>

            
        </div>
    </div>
</section>

<!-- Modal para Demo -->
<div id="demo-modal" class="modal-overlay">
    <div class="modal-content">
        <div class="modal-header">
            <h3 class="modal-title">Solicitar Demo</h3>
            <button class="modal-close" id="close-modal">&times;</button>
        </div>
        
        <form id="demo-form" class="modal-form">
            <div class="form-group">
                <label for="demo-name">Nombre completo</label>
                <input 
                    type="text" 
                    id="demo-name" 
                    name="name" 
                    required 
                    placeholder="Tu nombre completo"
                    class="form-input"
                />
            </div>

            <div class="form-group">
                <label for="demo-email">Correo electrónico</label>
                <input 
                    type="email" 
                    id="demo-email" 
                    name="email" 
                    required 
                    placeholder="tu@empresa.com"
                    class="form-input"
                />
            </div>
            
            <div class="form-group">
                <label for="account-type">Tipo de cuenta</label>
                <select id="account-type" name="accountType" required class="form-select">
                    <option value="">Selecciona una opción</option>
                    <option value="empresa">Empresa</option>
                    <option value="inversor">Inversor</option>
                </select>
            </div>
            
            <div class="form-actions">
                <button type="button" class="btn-cancel" id="cancel-demo">Cancelar</button>
                <button type="submit" class="btn-submit" id="submit-demo">
                    <span class="btn-text">Enviar Solicitud</span>
                    <span class="btn-loading">Enviando...</span>
                </button>
            </div>
        </form>
        
        <div id="demo-message" class="message-container"></div>
    </div>
</div>

<!-- EmailJS CDN -->
<script src="https://cdn.jsdelivr.net/npm/@emailjs/browser@3/dist/email.min.js"></script>

<style>
    /* Elementos decorativos flotantes */
    .floating-decorations {
        @apply overflow-hidden absolute inset-0 pointer-events-none;
    }

    .floating-element {
        @apply absolute rounded-full blur-lg;
        will-change: transform;
    }

    .floating-element--1 {
        @apply left-4 top-10 w-20 h-20 opacity-30 bg-gradient-to-br from-primary/20 to-accent/10 sm:top-16 sm:left-6 sm:w-28 sm:h-28 sm:blur-xl sm:opacity-40 md:top-20 md:left-10 md:w-32 md:h-32;
    }

    .floating-element--2 {
        @apply right-8 top-32 w-16 h-16 opacity-40 blur-xl bg-gradient-to-br from-secondary/30 to-primary/20 sm:top-36 sm:right-12 sm:w-20 sm:h-20 sm:blur-2xl sm:opacity-50 md:top-40 md:right-20 md:w-24 md:h-24;
    }

    .floating-element--3 {
        @apply bottom-24 left-1/4 w-24 h-24 opacity-20 blur-2xl bg-gradient-to-br from-accent/15 to-secondary/10 sm:bottom-28 sm:w-32 sm:h-32 sm:blur-3xl sm:opacity-30 md:bottom-32 md:w-40 md:h-40;
    }

    .floating-element--4 {
        @apply bottom-16 right-1/3 w-20 h-20 opacity-25 blur-xl bg-gradient-to-br from-primary/25 to-accent/15 sm:bottom-20 sm:w-24 sm:h-24 sm:blur-2xl sm:opacity-35 md:bottom-24 md:w-28 md:h-28;
    }

    /* Cards optimizadas con GPU acceleration */
    .card-wrapper {
        @apply overflow-hidden relative p-6 h-full bg-gradient-to-br from-white to-gray-50 rounded-2xl border border-gray-200 transition-all duration-300 sm:rounded-3xl sm:p-8;
        transform: translate3d(0, 0, 0); /* GPU acceleration */
        will-change: transform; /* Optimización para animaciones */
    }

    .card-wrapper:hover {
        @apply shadow-2xl;
        transform: translate3d(0, -4px, 0) scale(1.02); /* GPU acceleration */
    }

    .card-hover-bg {
        @apply absolute inset-0 bg-gradient-to-br opacity-0 transition-opacity duration-500 from-primary/5 to-accent/5;
        will-change: opacity; /* Optimización para transiciones */
    }

    .group:hover .card-hover-bg {
        @apply opacity-100;
    }

    .card-content {
        @apply relative z-10;
        transform: translate3d(0, 0, 0); /* GPU acceleration */
    }

    .icon-container {
        @apply flex justify-center items-center mb-4 w-16 h-16 very-short:w-12 very-short:h-12 very-short:mb-2 bg-gradient-to-br rounded-xl transition-transform duration-300 from-primary to-secondary sm:w-20 sm:h-20 sm:rounded-2xl sm:mb-6;
        transform: translate3d(0, 0, 0); /* GPU acceleration */
        will-change: transform; /* Optimización para hover */
    }

    .counter-display {
        @apply mb-3 text-3xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-primary to-secondary transition-all duration-300 sm:text-4xl sm:mb-4;
        will-change: contents; /* Optimización para cambios de contenido */
    }

    /* Botones */
    .btn {
        @apply px-6 py-3 w-full text-base font-semibold rounded-xl transition-all duration-300 sm:w-auto sm:px-8 sm:py-4 sm:rounded-2xl sm:text-lg  ;
    }

    .btn:hover {
        @apply shadow-2xl;
    }

    .btn--primary {
        @apply text-white bg-gradient-to-r from-primary via-secondary to-accent;
    }

    .btn--secondary {
        @apply border-2 border-primary text-primary;
    }

    .btn--secondary:hover {
        @apply bg-primary text-white;
    }

    /* Estados iniciales para animaciones - Sin FOUC */
    .gsap-badge,
    .gsap-title,
    .gsap-subtitle,
    .gsap-card,
    .gsap-cta {
        /* Los estados iniciales los maneja JavaScript directamente */
    }

    /* Estilos del Modal */
    .modal-overlay {
        @apply fixed inset-0 bg-black/50 backdrop-blur-sm opacity-0 invisible transition-all duration-300;
        z-index: 99999;
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 20px;
    }

    .modal-overlay.active {
        @apply opacity-100 visible;
    }

    .modal-content {
        @apply w-full max-w-md bg-white rounded-2xl shadow-2xl p-6 transition-all duration-300;
        transform: scale(0.9);
        position: relative;
        z-index: 100000;
        max-height: 90vh;
        overflow-y: auto;
    }

    .modal-overlay.active .modal-content {
        transform: scale(1);
    }

    .modal-header {
        @apply flex justify-between items-center mb-6;
    }

    .modal-title {
        @apply text-2xl font-bold text-gray-900;
    }

    .modal-close {
        @apply w-8 h-8 flex items-center justify-center rounded-lg text-gray-400 hover:text-gray-600 hover:bg-gray-100 transition-colors text-2xl;
    }

    .modal-form {
        @apply space-y-4;
    }

    .form-group {
        @apply space-y-2;
    }

    .form-group label {
        @apply block text-sm font-medium text-gray-700;
    }

    .form-input, .form-select {
        @apply w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent transition-all duration-200;
    }

    .form-actions {
        @apply flex gap-3 pt-4;
    }

    .btn-cancel {
        @apply flex-1 px-4 py-3 text-gray-600 bg-gray-100 rounded-lg hover:bg-gray-200 transition-colors font-medium;
    }

    .btn-submit {
        @apply flex-1 px-4 py-3 bg-gradient-to-r from-primary to-secondary text-white rounded-lg hover:shadow-lg transition-all duration-200 font-medium relative;
    }

    .btn-submit.loading {
        @apply pointer-events-none;
    }

    .btn-loading {
        @apply hidden;
    }

    .btn-submit.loading .btn-text {
        @apply hidden;
    }

    .btn-submit.loading .btn-loading {
        @apply block;
    }

    .message-container {
        @apply mt-4 p-4 rounded-lg text-center font-medium hidden;
    }

    .message-success {
        @apply bg-green-100 text-green-800 border border-green-200;
    }

    .message-error {
        @apply bg-red-100 text-red-800 border border-red-200;
    }

    /* Reducir motion para accesibilidad */
    @media (prefers-reduced-motion: reduce) {
        * {
            animation-duration: 0.01ms !important;
            animation-iteration-count: 1 !important;
            transition-duration: 0.01ms !important;
        }
    }
</style>

<script>
    // ✅ SOLUCIÓN SIN TYPESCRIPT - JavaScript puro que SÍ funciona
    
    // Declaraciones de tipos
    declare global {
        interface Window {
            gsap: any;
        }
        var emailjs: any;
    }
    
    // Variables globales simples
    let animationsReady = false;
    let animationsInitialized = false;
    
    // ✅ OPTIMIZACIÓN: Lazy loading de GSAP (solo core, sin ScrollTrigger)
    function loadGSAP(): Promise<void> {
        return new Promise<void>((resolve, reject) => {
            // Cache check
            if (window.gsap) {
                resolve();
                return;
            }
            
            // Preload con prefetch
            const link = document.createElement('link');
            link.rel = 'prefetch';
            link.href = 'https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/gsap.min.js';
            document.head.appendChild(link);
            
            // Carga dinámica optimizada (solo GSAP core)
            const gsapScript = document.createElement('script');
            gsapScript.src = 'https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/gsap.min.js';
            gsapScript.async = true; // Carga asíncrona
            gsapScript.onload = () => resolve();
            document.head.appendChild(gsapScript);
        });
    }

    // Función principal - Solo hover effects y animaciones inmediatas
    async function initSimpleAnimations() {
        try {
            // ✅ Cargar GSAP si no está disponible
            if (typeof window.gsap === 'undefined') {
                console.log('⏳ Cargando GSAP...');
                await loadGSAP();
            }

            // ✅ Evitar inicialización duplicada
            if (animationsInitialized) {
                console.log('⚠️ Animaciones ya inicializadas');
                return;
            }
                
            console.log('🚀 Iniciando animaciones simples (sin ScrollTrigger)...');

            // ===== ANIMACIONES INMEDIATAS SIN SCROLL TRIGGER =====
            
            // Mostrar todos los elementos inmediatamente con animación de entrada suave
            window.gsap.set('.gsap-badge, .gsap-title, .gsap-subtitle, .gsap-card, .gsap-cta', {
                opacity: 1,
                y: 0,
                scale: 1
            });

          

            // ✅ Contadores animados - SIN SCROLL TRIGGER
            const counters = document.querySelectorAll('.gsap-counter');
            console.log('🔍 Contadores encontrados:', counters.length);
            
            counters.forEach(function(counter, index) {
                const target = parseInt(counter.getAttribute('data-target') || '0');
                const valueElement = counter.querySelector('.counter-value');
                
                if (valueElement) {
                    // Iniciar contador inmediatamente después de un pequeño delay
                    setTimeout(() => {
                        window.gsap.to(valueElement, {
                            innerHTML: target,
                            duration: 2,
                            ease: 'power2.out',
                            snap: { innerHTML: 1 },
                            delay: index * 0.2 // Stagger entre contadores
                        });
                    }, 1000); // Delay inicial de 1 segundo
                }
            });

            // ✅ Elementos flotantes - Solo movimiento suave (sin parallax)
            document.querySelectorAll('.floating-element').forEach(function(element, index) {
                // Movimiento flotante infinito simple
                window.gsap.to(element, {
                    y: 15 + index * 5,
                    rotation: 5 + index * 2,
                    duration: 4 + index * 0.5,
                    ease: 'power1.inOut',
                    yoyo: true,
                    repeat: -1
                });
            });

            // 9. ✅ Hover effects para cards
            document.querySelectorAll('.gsap-card').forEach(function(card) {
                let hoverTimeout: any;
                
                card.addEventListener('mouseenter', function() {
                    clearTimeout(hoverTimeout);
                    hoverTimeout = setTimeout(() => {
                        window.gsap.to(card, {
                            y: -8, scale: 1.02, duration: 0.3, ease: 'power2.out'
                        });
                    }, 50); // Throttle de 50ms
                });

                card.addEventListener('mouseleave', function() {
                    clearTimeout(hoverTimeout);
                    window.gsap.to(card, {
                        y: 0, scale: 1, duration: 0.3, ease: 'power2.out'
                    });
                });
            });

            // 10. ✅ Hover effects para botones
            document.querySelectorAll('.gsap-btn-primary, .gsap-btn-secondary').forEach(function(btn) {
                btn.addEventListener('mouseenter', function() {
                    window.gsap.to(btn, {
                        scale: 1.05,
                        y: -2,
                        duration: 0.2,
                        ease: 'power2.out'
                    });
                });

                btn.addEventListener('mouseleave', function() {
                    window.gsap.to(btn, {
                        scale: 1,
                        y: 0,
                        duration: 0.2,
                        ease: 'power2.out'
                    });
                });
            });

            animationsInitialized = true;
            animationsReady = true;
            
            console.log('✅ Animaciones simples inicializadas correctamente (sin ScrollTrigger)!');

        } catch (error) {
            console.error('❌ Error en animaciones:', error);
        }
    }

    // ===== SISTEMA DE INICIALIZACIÓN SIMPLE =====
    
    function tryInitAnimations() {
        if (!animationsReady) {
            initSimpleAnimations();
        }
    }

    // Múltiples puntos de entrada
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', tryInitAnimations);
    } else {
        tryInitAnimations();
    }

    // Backup tras cargar completamente
    window.addEventListener('load', function() {
        setTimeout(tryInitAnimations, 100);
    });

    // Para navegación SPA de Astro
    document.addEventListener('astro:page-load', function() {
        animationsInitialized = false;
        animationsReady = false;
        setTimeout(tryInitAnimations, 200);
    });

    // Cleanup para navegación SPA (simplificado)
    document.addEventListener('astro:before-preparation', function() {
        animationsInitialized = false;
        animationsReady = false;
    });

    // ===== FUNCIONALIDAD DEL MODAL DE DEMO =====
    
    // Configuración de EmailJS (usar la misma configuración del formulario de contacto)
    const DEMO_EMAILJS_CONFIG = {
        serviceId: "service_7itbzvb",
        templateId: "template_35ska4s", // Crear nuevo template para demo
        publicKey: "BGqmhQGFDVXPevxYQ"
    };

    // Variables para el modal
    let demoModal: HTMLElement | null = null;
    let demoForm: HTMLFormElement | null = null;
    let submitButton: HTMLButtonElement | null = null;
    let messageContainer: HTMLElement | null = null;

    // Inicializar modal cuando se cargue la página
    function initDemoModal() {
        demoModal = document.getElementById('demo-modal');
        demoForm = document.getElementById('demo-form') as HTMLFormElement;
        submitButton = document.getElementById('submit-demo') as HTMLButtonElement;
        messageContainer = document.getElementById('demo-message');

        // Event listeners
        const demoBtn = document.getElementById('demo-btn');
        const closeBtn = document.getElementById('close-modal');
        const cancelBtn = document.getElementById('cancel-demo');

        if (demoBtn) {
            demoBtn.addEventListener('click', openDemoModal);
        }

        if (closeBtn) {
            closeBtn.addEventListener('click', closeDemoModal);
        }

        if (cancelBtn) {
            cancelBtn.addEventListener('click', closeDemoModal);
        }

        if (demoModal) {
            demoModal.addEventListener('click', (e) => {
                if (e.target === demoModal) {
                    closeDemoModal();
                }
            });
        }

        if (demoForm) {
            demoForm.addEventListener('submit', handleDemoSubmit);
        }

        console.log('✅ Modal de demo inicializado correctamente');
    }

    // Abrir modal
    function openDemoModal() {
        console.log('📖 Abriendo modal de demo');
        if (demoModal) {
            demoModal.classList.add('active');
            document.body.style.overflow = 'hidden';
        }
    }

    // Cerrar modal
    function closeDemoModal() {
        console.log('📖 Cerrando modal de demo');
        if (demoModal) {
            demoModal.classList.remove('active');
            document.body.style.overflow = '';
            resetDemoForm();
        }
    }

    // Resetear formulario
    function resetDemoForm() {
        if (demoForm) {
            demoForm.reset();
        }
        if (submitButton) {
            submitButton.classList.remove('loading');
        }
        if (messageContainer) {
            messageContainer.classList.add('hidden');
            messageContainer.className = 'message-container hidden';
        }
    }

    // Enviar formulario
    async function handleDemoSubmit(e: Event) {
        e.preventDefault();
        
        console.log('📧 Enviando solicitud de demo...');
        
        if (!submitButton || !messageContainer) return;

        // Mostrar estado de carga
        submitButton.classList.add('loading');
        messageContainer.classList.add('hidden');

        try {
            // Obtener datos del formulario
            const formData = new FormData(demoForm!);
            const name = formData.get('name') as string;
            const email = formData.get('email') as string;
            const accountType = formData.get('accountType') as string;

            console.log('📧 Datos del formulario:', { name, email, accountType });

            // Verificar que EmailJS esté disponible
            if (typeof emailjs === 'undefined') {
                throw new Error('EmailJS no está disponible');
            }

            // Inicializar EmailJS
            emailjs.init(DEMO_EMAILJS_CONFIG.publicKey);

            // Preparar datos para el email
            const emailData = {
                name: name,
                to_email: email,
                account_type: accountType === 'empresa' ? 'Empresa' : 'Inversor',
                user_email: email,
                message: `Solicitud de demo de ${name} para cuenta tipo: ${accountType === 'empresa' ? 'Empresa' : 'Inversor'}`,
                timestamp: new Date().toLocaleString('es-ES')
            };

            console.log('📧 Enviando email con datos:', emailData);

            // Enviar email
            const response = await emailjs.send(
                DEMO_EMAILJS_CONFIG.serviceId,
                DEMO_EMAILJS_CONFIG.templateId,
                emailData
            );

            console.log('✅ Email enviado exitosamente:', response);

            // Mostrar mensaje de éxito
            showDemoMessage('¡Solicitud enviada correctamente! Te contactaremos pronto para agendar tu demo.', 'success');

            // Cerrar modal después de 3 segundos y mostrar notificación
            setTimeout(() => {
                closeDemoModal();
                showSuccessNotification();
            }, 3000);

        } catch (error) {
            console.error('❌ Error al enviar email:', error);
            showDemoMessage('Error al enviar la solicitud. Por favor, inténtalo de nuevo.', 'error');
        } finally {
            submitButton.classList.remove('loading');
        }
    }

    // Mostrar mensaje
    function showDemoMessage(message: string, type: 'success' | 'error') {
        if (!messageContainer) return;

        messageContainer.textContent = message;
        messageContainer.className = `message-container message-${type}`;
        messageContainer.classList.remove('hidden');
    }

    // Mostrar notificación de éxito (toast)
    function showSuccessNotification() {
        // Crear elemento de notificación
        const notification = document.createElement('div');
        notification.className = 'success-notification';
        notification.innerHTML = `
            <div class="notification-content">
                <svg class="notification-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                </svg>
                <div class="notification-text">
                    <h4>¡Solicitud enviada!</h4>
                    <p>Te contactaremos pronto para agendar tu demo</p>
                </div>
            </div>
        `;

        // Agregar estilos inline para la notificación
        notification.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            background: linear-gradient(135deg, #10b981, #059669);
            color: white;
            padding: 16px 20px;
            border-radius: 12px;
            box-shadow: 0 10px 25px rgba(16, 185, 129, 0.3);
            z-index: 10001;
            transform: translateX(400px);
            transition: all 0.3s ease;
            max-width: 350px;
            min-width: 300px;
        `;

        // Estilos para el contenido
        const style = document.createElement('style');
        style.textContent = `
            .notification-content {
                display: flex;
                align-items: center;
                gap: 12px;
            }
            .notification-icon {
                width: 24px;
                height: 24px;
                flex-shrink: 0;
            }
            .notification-text h4 {
                margin: 0;
                font-size: 16px;
                font-weight: 600;
            }
            .notification-text p {
                margin: 4px 0 0 0;
                font-size: 14px;
                opacity: 0.9;
            }
        `;
        document.head.appendChild(style);

        // Agregar al DOM
        document.body.appendChild(notification);

        // Animar entrada
        setTimeout(() => {
            notification.style.transform = 'translateX(0)';
        }, 100);

        // Auto remover después de 5 segundos
        setTimeout(() => {
            notification.style.transform = 'translateX(400px)';
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.parentNode.removeChild(notification);
                }
                if (style.parentNode) {
                    style.parentNode.removeChild(style);
                }
            }, 300);
        }, 5000);
    }

    // Función legacy para mantener compatibilidad
    function handleEventDemo() {
        openDemoModal();
    }

    // Inicializar modal cuando el DOM esté listo
    document.addEventListener('DOMContentLoaded', initDemoModal);
    
    // También inicializar en astro:page-load para SPA
    document.addEventListener('astro:page-load', initDemoModal);

    console.log('📋 Script de animaciones cargado, esperando inicialización...');
</script>